class Solution 
{
    public static ArrayList<ArrayList<Integer>> Paths(Node root) 
    {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        ArrayList<Integer> path = new ArrayList<>();
        dfs(root, path, result);
        return result;
    }

    private static void dfs(Node node, ArrayList<Integer> path, ArrayList<ArrayList<Integer>> result) {
        if (node == null) return;

        // Add current node to path
        path.add(node.data);

        // If leaf node, save the path
        if (node.left == null && node.right == null) {
            result.add(new ArrayList<>(path));
        } else {
            dfs(node.left, path, result);
            dfs(node.right, path, result);
        }

        // Backtrack (remove last added element)
        path.remove(path.size() - 1);
    }
}
